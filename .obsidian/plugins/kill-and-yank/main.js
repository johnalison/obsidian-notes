/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => KillAndYankPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var KillAndYankPlugin = class extends import_obsidian.Plugin {
  constructor() {
    super(...arguments);
    this.mark = null;
  }
  isComposing(view) {
    const editorView = view.editor.cm;
    return editorView.composing;
  }
  async onload() {
    this.addCommand({
      id: "kill-line",
      name: "Kill line (Cut from the cursor position to the end of the line)",
      hotkeys: [{ modifiers: ["Ctrl"], key: "k" }],
      editorCallback: (editor, view) => {
        if (this.isComposing(view))
          return;
        const position = editor.getCursor();
        const line = editor.getLine(position.line);
        const textToBeRetained = line.slice(0, position.ch);
        const textToBeCut = line.slice(position.ch);
        navigator.clipboard.writeText(textToBeCut);
        editor.setLine(position.line, textToBeRetained);
        editor.setCursor(position, position.ch);
      }
    });
    this.addCommand({
      id: "kill-region",
      name: "Kill region (Cut the selection)",
      hotkeys: [{ modifiers: ["Ctrl"], key: "w" }],
      editorCallback: (editor, view) => {
        if (this.isComposing(view))
          return;
        if (this.mark) {
          editor.setSelection(this.mark, editor.getCursor());
          this.mark = null;
        }
        navigator.clipboard.writeText(editor.getSelection());
        editor.replaceSelection("");
      }
    });
    this.addCommand({
      id: "yank",
      name: "Yank (Paste)",
      hotkeys: [{ modifiers: ["Ctrl"], key: "y" }],
      editorCallback: (editor, view) => {
        if (this.isComposing(view))
          return;
        navigator.clipboard.readText().then((text) => {
          editor.replaceSelection(text);
        });
      }
    });
    this.addCommand({
      id: "set-mark",
      name: "Set mark (Toggle the start position of the selection)",
      hotkeys: [{ modifiers: ["Ctrl"], key: " " }],
      editorCallback: (editor, view) => {
        if (this.mark) {
          editor.setSelection(this.mark, editor.getCursor());
          this.mark = null;
        } else {
          this.mark = editor.getCursor();
        }
      }
    });
  }
  onunload() {
  }
};
